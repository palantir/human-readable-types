// This file is managed by the excavator 'consistent-publish-scripts' check, changes will be overwritten.
apply plugin: 'com.jfrog.bintray'
// Intentionally not applying nebula.maven-publish, but most of its constituent plugins,
// because we do _not_ want nebula.maven-compile-only
apply plugin: 'maven-publish'
apply plugin: 'nebula.maven-nebula-publish'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-developer'
apply plugin: 'nebula.maven-manifest'
apply plugin: 'nebula.info-scm'
apply plugin: 'nebula.maven-scm'

jar {
    manifest {
        attributes("Implementation-Version" : project.version)
    }
}

java {
  withJavadocJar()
  withSourcesJar()
}

bintray {
    user = System.env.BINTRAY_USERNAME
    key = System.env.BINTRAY_PASSWORD
    publish = true
    pkg {
        repo = 'releases'
        name = 'human-readable-types'
        userOrg = 'palantir'
        licenses = ['Apache-2.0']
        publications = ['nebula']
    }
}

publish.dependsOn bintrayUpload
bintrayUpload.onlyIf {
    versionDetails().isCleanTag
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            pom {
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                    }
                }
                developers {
                    developer {
                        id = "palantir"
                        name = "palantir"
                        organizationUrl = "https://www.palantir.com"
                    }
                }
            }
        }
    }
}

// Turning off module metadata so that all consumers just use regular POMs
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

def hasSigningKey = project.findProperty("signingKey") && project.findProperty("signingKeyId")
if(hasSigningKey) {
    signing {
        // Expect that the gpg key is base64 decoded as a secret in CircleCI
        // to avoid problems with newlines in CircleCI env vars
        useInMemoryPgpKeys(findProperty("signingKeyId"), new String(findProperty("signingKey").decodeBase64()), findProperty("signingPassword"))

        sign publishing.publications.maven
    }
}
